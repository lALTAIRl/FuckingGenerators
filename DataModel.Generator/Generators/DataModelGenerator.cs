using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Npgsql;
using SqlKata;
using SqlKata.Compilers;
using SqlKata.Execution;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SourceGenerator.Generators
{
    [Generator]
    public class DataModelGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterSourceOutput(
                context.AnalyzerConfigOptionsProvider,
                (sourceProductionContext, optionsProvider) =>
                {
                    string connectionString = "Host=localhost;Port=5432;Database=pgtestdata;Username=postgres;Password=password";
                    var classNames = GetClassNamesFromDatabase(connectionString);

                    foreach (var className in classNames)
                    {
                        var classSource = GenerateClassSource(className);
                        sourceProductionContext.AddSource(
                            $"{className}.cs", 
                            SourceText.From(classSource, Encoding.UTF8));

                        var mappingSource = GenerateMappingSource(className);
                        sourceProductionContext.AddSource(
                            $"{className}Map.cs", 
                            SourceText.From(mappingSource, Encoding.UTF8));
                    }
                });
        }

        private List<string> GetClassNamesFromDatabase(string connectionString)
        {
            using var connection = new NpgsqlConnection(connectionString);
            connection.Open();

            var db = new QueryFactory(connection, new PostgresCompiler());
            var query = new Query("testclasses").Select("name");

            var classNames = db.Get<string>(query).ToList();

            return classNames;
        }

        private string GenerateClassSource(string className)
        {
            var sourceBuilder = new StringBuilder(
$@" // <auto-generated/>

namespace GeneratedClasses
{{
    public class {className}
    {{
        public virtual long Id {{ get; set; }}
    }}
}}
");

            return sourceBuilder.ToString();
        }

        private string GenerateMappingSource(string className)
        {
            var sourceBuilder = new StringBuilder(
$@" // <auto-generated/>
using GeneratedClasses;
using NHibernate.Mapping.ByCode.Conformist;

namespace GeneratedMappings
{{
    public class {className}Map : ClassMapping<{className}>
    {{
        public {className}Map()
        {{
            Id<long>(x => x.Id);
        }}
    }}
}}
");

            return sourceBuilder.ToString();
        }
    }
}
