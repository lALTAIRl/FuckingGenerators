namespace NhibernateAdapter.Generator.Templates
{
    public class AdapterTemplate
    {
        public const string Template =
@" // <auto-generated/>
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Dialect;
using NHibernate.Extensions.NpgSql;
using NHibernate.Mapping.ByCode;
using NHibernate.Tool.hbm2ddl;
using GeneratedClasses;
using GeneratedMappings;

namespace NhibernateAdapterTEST
{{
    public static class NhibernateAdapter
    {{
        public static Configuration _NHConfiguration;
        public static ISessionFactory _sessionFactory;
        
        public static void Test()
        {{
            using var session = _sessionFactory.OpenSession();
            using var transaction = session.BeginTransaction();

            var records = session.Query<Animal>().ToList();

            foreach (var record in records)
            {{
                Console.WriteLine(record.Id);
            }}
        }}

        public static Configuration ConfigureNHibernate()
        {{
            var config = new Configuration();
            config.SessionFactoryName(""test"");

            config.DataBaseIntegration(db =>
            {{
                db.Dialect<PostgreSQLDialect>();
                db.Driver<NpgSqlDriver>();
                db.KeywordsAutoImport = Hbm2DDLKeyWords.AutoQuote;
                db.IsolationLevel = System.Data.IsolationLevel.ReadCommitted;
                db.ConnectionString = ""Host=localhost;Port=5432;Database=pgtestdata;Username=postgres;Password=password"";
                db.Timeout = 10;
            }});

            return config;
        }}

        public static HbmMapping GetMappings()
        {{
            ModelMapper mapper = new ModelMapper();

            {0}

            HbmMapping mapping = mapper.CompileMappingFor(new[]
            {{
                {1}
            }});
            return mapping;
        }}

        public static void SetupNhibernate()
        {{
            _NHConfiguration = ConfigureNHibernate();
            var mapping = GetMappings();

            _NHConfiguration.AddDeserializedMapping(mapping, ""NHSchemaTest"");

            SchemaMetadataUpdater.QuoteTableAndColumns(_NHConfiguration);
            _sessionFactory = _NHConfiguration.BuildSessionFactory();
        }}

        public static void CreateDatabaseSchema()
        {{
            new SchemaExport(_NHConfiguration).Drop(false, true);
            new SchemaExport(_NHConfiguration).Create(false, true);
        }}

        public static bool ValidateSchema()
        {{
            try
            {{
                var validator = new SchemaValidator(_NHConfiguration);
                validator.Validate();
                Console.WriteLine(""SCHEMA VALID!"");
                return true;
            }}
            catch (HibernateException e)
            {{
                Console.WriteLine(e.ToString());
                return false;
            }}
        }}

        public static void PopulateTestData()
        {{
            {2}

            using var session = _sessionFactory.OpenSession();
            using var transaction = session.BeginTransaction();

            {3}
            transaction.Commit();
        }}
    }}
}}
";
    }
}
