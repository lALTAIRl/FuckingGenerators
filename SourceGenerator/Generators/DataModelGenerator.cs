using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Npgsql;
using SourceGenerator.Models;
using SqlKata;
using SqlKata.Execution;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace SourceGenerator.Generators
{
    [Generator]
    public class DataModelGenerator : IIncrementalGenerator
    {
        private const string ConnectionString = "Host=localhost;Port=5432;Database=pgtestdata;Username=postgres;Password=password";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classProvider = context.CompilationProvider.Select((compilation, cancellationToken) =>
            {
                var classNames = GetClassNamesFromDatabase();
                return classNames.Select(name => GenerateClassSource(name)).ToImmutableArray();
            });

            context.RegisterSourceOutput(classProvider, (gen_context, sources) =>
            {
                foreach (var source in sources)
                {
                    gen_context.AddSource(source.Name, SourceText.From(source.Source, Encoding.UTF8));
                }
            });
        }

        private ImmutableArray<string> GetClassNamesFromDatabase()
        {
            //using var connection = new NpgsqlConnection(ConnectionString);
            //connection.Open();

            //var db = new QueryFactory(connection, new SqlKata.Compilers.PostgresCompiler());
            //var query = new Query("testclasses").Select("Name");

            //var classNames = db.Get<string>(query).ToImmutableArray();
            //return classNames;

            var classNames = new List<string> { "Apple", "Water", "Air" };
            return classNames.ToImmutableArray();
        }

        //public GeneratedSource GenerateDataModelSource(string entityName)
        //{
        //    return GenerateClassSource(entityName);
        //    //GenerateNHibernateMappingSource(entityName);
        //}

        private GeneratedSource GenerateClassSource(string className)
        {
            var sourceBuilder = new StringBuilder($@" // <auto-generated/>
using System;

namespace GeneratedClasses
{{
    public class {className}
    {{
        public long Id {{ get; set; }}
    }}
}}
");

            return new GeneratedSource($"{className}.cs", sourceBuilder.ToString());
        }

        //private GeneratedSource GenerateNHibernateMappingSource(string entityName)
        //{
        //    return new GeneratedSource($"{entityName}.cs", sourceBuilder.ToString());
        //}
    }
}
