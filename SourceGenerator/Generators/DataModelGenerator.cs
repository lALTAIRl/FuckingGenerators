using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Npgsql;
using SourceGenerator.Models;
using SqlKata;
using SqlKata.Compilers;
using SqlKata.Execution;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SourceGenerator.Generators
{
    [Generator]
    public class DataModelGenerator : IIncrementalGenerator
    {
        private const string PostgresConnectionString = "Host=localhost;Port=5432;Database=pgtestdata;Username=postgres;Password=password";
        private const string MSSQLConnectionString = "Data Source=.;Initial Catalog=testDB;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Adding a provider that depends on compilation
            var classProvider = context.CompilationProvider.Select((compilation, cancellationToken) =>
            {
                Log("Getting class names from the database.");
                var classNames = GetClassNamesFromDatabase();
                return classNames.Select(name => GenerateClassSource(name)).ToImmutableArray();
            });

            // Registering the source output
            context.RegisterSourceOutput(classProvider, (gen_context, sources) =>
            {
                foreach (var source in sources)
                {
                    Log($"Adding source: {source.Name}");
                    gen_context.AddSource(source.Name, SourceText.From(source.Source, Encoding.UTF8));
                }
            });
        }

        private ImmutableArray<string> GetClassNamesFromDatabase()
        {
            Log("Fetching class names...");
            using var connection = new NpgsqlConnection(PostgresConnectionString);
            connection.Open();

            var db = new QueryFactory(connection, new PostgresCompiler());
            var query = new Query("testclasses").Select("name");

            var classNames = db.Get<string>(query).ToImmutableArray();
            return classNames;

            //Log("Fetching class names...");
            //var classNames = new List<string> { "Test", "Teeest" };
            //return classNames.ToImmutableArray();
        }

        private GeneratedSource GenerateClassSource(string className)
        {
            Log($"Generating source for class: {className}");
            var sourceBuilder = new StringBuilder(
$@" // <auto-generated/>
using System;

namespace GeneratedClasses
{{
    public class {className}
    {{
        public long Id {{ get; set; }}
    }}
}}
");

            return new GeneratedSource($"{className}.cs", sourceBuilder.ToString());
        }

        private void Log(string message)
        {
            System.Diagnostics.Debug.WriteLine($"[DataModelGenerator] {message}");
        }
    }
}
