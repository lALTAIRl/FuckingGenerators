using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Npgsql;
using SqlKata;
using SqlKata.Compilers;
using SqlKata.Execution;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;

namespace SourceGenerator.Generators
{
    [Generator]
    public class DataModelGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterSourceOutput(
                context.AnalyzerConfigOptionsProvider,
                (sourceProductionContext, optionsProvider) =>
                {
                    string connectionString = "Host=localhost;Port=5432;Database=pgtestdata;Username=postgres;Password=password";
                    var classNames = GetClassNamesFromDatabase(connectionString);

                    foreach (var className in classNames)
                    {
                        var classSource = GenerateClassSource(className);
                        sourceProductionContext.AddSource($"{className}.cs", SourceText.From(classSource, Encoding.UTF8));

                        var mappingSource = GenerateMappingSource(className);
                        sourceProductionContext.AddSource($"{className}.hbm.xml", SourceText.From(mappingSource, Encoding.UTF8));
                        
                    }
                });
        }

        private List<string> GetClassNamesFromDatabase(string connectionString)
        {
            using var connection = new NpgsqlConnection(connectionString);
            connection.Open();

            var db = new QueryFactory(connection, new PostgresCompiler());
            var query = new Query("testclasses").Select("name");

            var classNames = db.Get<string>(query).ToList();

            //var classNames = new List<string> { "Test", "Fuck", "Shit", "NewApproach", "Save" };

            return classNames;
        }

        private string GenerateClassSource(string className)
        {
            var sourceBuilder = new StringBuilder(
$@" // <auto-generated/>
using System;

namespace GeneratedClasses
{{
    public class {className}
    {{
        public long Id {{ get; set; }}
    }}
}}
");

            return sourceBuilder.ToString();
        }

        private string GenerateMappingSource(string className)
        {
            var sourceBuilder = new StringBuilder(
$@" // <auto-generated/>
<? xml version = ""1.0"" encoding = ""utf-8"" ?>
<hibernate-mapping xmlns=""urn:nhibernate-mapping-2.2""
                   assembly=""FirstSolution""
                   namespace=""FirstSolution.Domain"">
  
  <class name=""{className}"">
    <id name = ""Id"" >
      < generator class=""increment"" />
    </id>
  </class>
  
</hibernate-mapping>
");

            return sourceBuilder.ToString();
        }
    }
}
